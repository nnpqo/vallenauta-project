// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Provides a Genkit flow for answering user questions about a book's content.
 *
 * - bookQuestionAnswering - A function that accepts a book's content and a question, then returns an answer to the question based on the book's content.
 * - BookQuestionAnsweringInput - The input type for the bookQuestionAnswering function.
 * - BookQuestionAnsweringOutput - The return type for the bookQuestionAnswering function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const BookQuestionAnsweringInputSchema = z.object({
  bookContent: z.string().describe('The content of the book.'),
  question: z.string().describe('The question to be answered based on the book content.'),
});
export type BookQuestionAnsweringInput = z.infer<typeof BookQuestionAnsweringInputSchema>;

const BookQuestionAnsweringOutputSchema = z.object({
  answer: z.string().describe('The answer to the question based on the book content.'),
});
export type BookQuestionAnsweringOutput = z.infer<typeof BookQuestionAnsweringOutputSchema>;

export async function bookQuestionAnswering(input: BookQuestionAnsweringInput): Promise<BookQuestionAnsweringOutput> {
  return bookQuestionAnsweringFlow(input);
}

const prompt = ai.definePrompt({
  name: 'bookQuestionAnsweringPrompt',
  input: {schema: BookQuestionAnsweringInputSchema},
  output: {schema: BookQuestionAnsweringOutputSchema},
  prompt: `You are a helpful AI assistant that answers questions based on the provided book content.\n\nBook Content:\n{{bookContent}}\n\nQuestion: {{question}}\n\nAnswer: `,
});

const bookQuestionAnsweringFlow = ai.defineFlow(
  {
    name: 'bookQuestionAnsweringFlow',
    inputSchema: BookQuestionAnsweringInputSchema,
    outputSchema: BookQuestionAnsweringOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
